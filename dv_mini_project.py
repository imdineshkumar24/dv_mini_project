# -*- coding: utf-8 -*-
"""dv mini project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1E4UsVzNGeDmARGHWRcodnbvtG9WMEX39
"""

A. In a dataset, we need only the latitude and longitude of each earthquake. Use python code to
extract those two column information and store it in separate list.

import pandas as pd
df1 = pd.read_csv('/content/1.0_week (2).csv')
print(df1.head())
lats = df1['latitude']
lons = df1['longitude']
lat_list = list(lats)
lon_list = list(lons)
print(lat_list[0:5])
print(lon_list[0:5])

!pip install basemap

B. Plot the above set latitude and longitude points in the world map.

from mpl_toolkits.basemap import Basemap
import matplotlib.pyplot as plt
import numpy as np
eq_map = Basemap(projection='robin', resolution = 'l', area_thresh = 1000.0,
              lat_0=0, lon_0=-130)
eq_map.drawcoastlines()
eq_map.drawcountries()
eq_map.fillcontinents(color = 'gray')

eq_map.drawmeridians(np.arange(0, 360, 30))
eq_map.drawparallels(np.arange(-90, 90, 30))

x,y = eq_map(lons, lats)
eq_map.plot(x, y, 'ro', markersize=6)

plt.show()

C. Read the magnitudes information from the csv file and store it into a list along with the latitudes
and longitudes of each earthquake

magnitudes = df1['mag']
mag_list = list(magnitudes)
mag_list[0:5]

D. Loop through the points and plot them one at a time. When we plot each point, adjust the dot
size according to the magnitude. Since the magnitudes start at 1.0, we can simply use the
magnitude as a scale factor.

from mpl_toolkits.basemap import Basemap
import matplotlib.pyplot as plt
import numpy as np

eq_map = Basemap(projection='robin', resolution = 'l', area_thresh = 1000.0,
              lat_0=0, lon_0=-130)
eq_map.drawcoastlines()
eq_map.drawcountries()
eq_map.fillcontinents(color = 'gray')
eq_map.drawmapboundary()
eq_map.drawmeridians(np.arange(0, 360, 30))
eq_map.drawparallels(np.arange(-90, 90, 30))

min_marker_size = 1.5
for lon, lat, mag in zip(lons, lats, magnitudes):
  x,y = eq_map(lon, lat)
  msize = mag * min_marker_size
  eq_map.plot(x, y, 'ro', markersize=msize)

plt.show()

E. Use some different colors to represent the magnitudes as well. Let's make small earthquakes
green, moderate earthquakes yellow, and significant earthquakes red

def get_marker_color(magnitude):
    if magnitude < 3.0:
        return ('go')
    elif magnitude < 5.0:
        return ('yo')
    else:
        return ('ro')
eq_map = Basemap(projection='robin', resolution = 'l', area_thresh = 1000.0,
              lat_0=0, lon_0=-130)
eq_map.drawcoastlines()
eq_map.drawcountries()
eq_map.fillcontinents(color = 'gray')
eq_map.drawmapboundary()
eq_map.drawmeridians(np.arange(0, 360, 30))
eq_map.drawparallels(np.arange(-90, 90, 30))

min_marker_size = 2.5
for lon, lat, mag in zip(lons, lats, magnitudes):
    x,y = eq_map(lon, lat)
    msize = mag * min_marker_size
    marker_string = get_marker_color(mag)
    eq_map.plot(x, y, marker_string, markersize=msize)

plt.show()

F. Add a title to our map. Our title needs to include the date range for these earthquakes

timestrings = df1['time']
print(timestrings)

from mpl_toolkits.basemap import Basemap
import matplotlib.pyplot as plt
import numpy as np

def get_marker_color(magnitude):
    if magnitude < 3.0:
        return ('go')
    elif magnitude < 5.0:
        return ('yo')
    else:
        return ('ro')
eq_map = Basemap(projection='robin', resolution = 'l', area_thresh = 1000.0,
              lat_0=0, lon_0=-130)
eq_map.drawcoastlines()
eq_map.drawcountries()
eq_map.fillcontinents(color = 'gray')
eq_map.drawmapboundary()
eq_map.drawmeridians(np.arange(0, 360, 30))
eq_map.drawparallels(np.arange(-90, 90, 30))

min_marker_size = 2.5
for lon, lat, mag in zip(lons, lats, magnitudes):
    x,y = eq_map(lon, lat)
    msize = mag * min_marker_size
    marker_string = get_marker_color(mag)
    eq_map.plot(x, y, marker_string, markersize=msize)

title_string = "Earthquakes of Magnitude 1.0 or Greater\n"
title_string += "{} through {}".format(timestrings[len(timestrings)-1], timestrings[0])
plt.title(title_string)

plt.show()